// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product service
//
// Command:
// $ goa gen goa-demo/design

package product

import (
	"context"
	productviews "goa-demo/gen/product/views"
)

// The product management service.
type Service interface {
	// GetListProduct implements getListProduct.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	GetListProduct(context.Context) (res StoredProductCollection, view string, err error)
	// GetProduct implements getProduct.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	GetProduct(context.Context, *GetProductPayload) (res *StoredProduct, view string, err error)
	// FilterProduct implements filterProduct.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	FilterProduct(context.Context, *FilterProductPayload) (res StoredProductCollection, view string, err error)
	// CreateProduct implements createProduct.
	CreateProduct(context.Context, *Product) (res string, err error)
	// UpdateProduct implements updateProduct.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	UpdateProduct(context.Context, *UpdateProductPayload) (res *StoredProduct, view string, err error)
	// Remove product from storage
	RemoveProduct(context.Context, *RemoveProductPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "product"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"getListProduct", "getProduct", "filterProduct", "createProduct", "updateProduct", "removeProduct"}

// StoredProductCollection is the result type of the product service
// getListProduct method.
type StoredProductCollection []*StoredProduct

// GetProductPayload is the payload type of the product service getProduct
// method.
type GetProductPayload struct {
	// ID of product to show
	ID int
	// View to render
	View *string
}

// StoredProduct is the result type of the product service getProduct method.
type StoredProduct struct {
	// ID is the unique id of the bottle.
	ID int
	// Name of product
	Name          string
	CurrencyUnit  string
	Description   string
	UpdatedTime   string
	PurchasePrice float64
	SellingPrice  float64
}

// FilterProductPayload is the payload type of the product service
// filterProduct method.
type FilterProductPayload struct {
	// Currency Unit
	CurrencyUnit string
}

// Product is the payload type of the product service createProduct method.
type Product struct {
	// Name of product
	Name          string
	CurrencyUnit  string
	Description   string
	UpdatedTime   string
	PurchasePrice float64
	SellingPrice  float64
}

// UpdateProductPayload is the payload type of the product service
// updateProduct method.
type UpdateProductPayload struct {
	// ID of Product need update
	ID int
	// Product Updated
	Product *Product
}

// RemoveProductPayload is the payload type of the product service
// removeProduct method.
type RemoveProductPayload struct {
	// ID of product to remove
	ID int
}

// NotFound is the type returned when attempting to show or delete product that
// does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing product
	ID int
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete product that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewStoredProductCollection initializes result type StoredProductCollection
// from viewed result type StoredProductCollection.
func NewStoredProductCollection(vres productviews.StoredProductCollection) StoredProductCollection {
	var res StoredProductCollection
	switch vres.View {
	case "default", "":
		res = newStoredProductCollection(vres.Projected)
	case "tiny":
		res = newStoredProductCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredProductCollection initializes viewed result type
// StoredProductCollection from result type StoredProductCollection using the
// given view.
func NewViewedStoredProductCollection(res StoredProductCollection, view string) productviews.StoredProductCollection {
	var vres productviews.StoredProductCollection
	switch view {
	case "default", "":
		p := newStoredProductCollectionView(res)
		vres = productviews.StoredProductCollection{Projected: p, View: "default"}
	case "tiny":
		p := newStoredProductCollectionViewTiny(res)
		vres = productviews.StoredProductCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// NewStoredProduct initializes result type StoredProduct from viewed result
// type StoredProduct.
func NewStoredProduct(vres *productviews.StoredProduct) *StoredProduct {
	var res *StoredProduct
	switch vres.View {
	case "default", "":
		res = newStoredProduct(vres.Projected)
	case "tiny":
		res = newStoredProductTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredProduct initializes viewed result type StoredProduct from
// result type StoredProduct using the given view.
func NewViewedStoredProduct(res *StoredProduct, view string) *productviews.StoredProduct {
	var vres *productviews.StoredProduct
	switch view {
	case "default", "":
		p := newStoredProductView(res)
		vres = &productviews.StoredProduct{Projected: p, View: "default"}
	case "tiny":
		p := newStoredProductViewTiny(res)
		vres = &productviews.StoredProduct{Projected: p, View: "tiny"}
	}
	return vres
}

// newStoredProductCollection converts projected type StoredProductCollection
// to service type StoredProductCollection.
func newStoredProductCollection(vres productviews.StoredProductCollectionView) StoredProductCollection {
	res := make(StoredProductCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredProduct(n)
	}
	return res
}

// newStoredProductCollectionTiny converts projected type
// StoredProductCollection to service type StoredProductCollection.
func newStoredProductCollectionTiny(vres productviews.StoredProductCollectionView) StoredProductCollection {
	res := make(StoredProductCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredProductTiny(n)
	}
	return res
}

// newStoredProductCollectionView projects result type StoredProductCollection
// to projected type StoredProductCollectionView using the "default" view.
func newStoredProductCollectionView(res StoredProductCollection) productviews.StoredProductCollectionView {
	vres := make(productviews.StoredProductCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredProductView(n)
	}
	return vres
}

// newStoredProductCollectionViewTiny projects result type
// StoredProductCollection to projected type StoredProductCollectionView using
// the "tiny" view.
func newStoredProductCollectionViewTiny(res StoredProductCollection) productviews.StoredProductCollectionView {
	vres := make(productviews.StoredProductCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredProductViewTiny(n)
	}
	return vres
}

// newStoredProduct converts projected type StoredProduct to service type
// StoredProduct.
func newStoredProduct(vres *productviews.StoredProductView) *StoredProduct {
	res := &StoredProduct{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.CurrencyUnit != nil {
		res.CurrencyUnit = *vres.CurrencyUnit
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.UpdatedTime != nil {
		res.UpdatedTime = *vres.UpdatedTime
	}
	if vres.PurchasePrice != nil {
		res.PurchasePrice = *vres.PurchasePrice
	}
	if vres.SellingPrice != nil {
		res.SellingPrice = *vres.SellingPrice
	}
	return res
}

// newStoredProductTiny converts projected type StoredProduct to service type
// StoredProduct.
func newStoredProductTiny(vres *productviews.StoredProductView) *StoredProduct {
	res := &StoredProduct{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.CurrencyUnit != nil {
		res.CurrencyUnit = *vres.CurrencyUnit
	}
	if vres.SellingPrice != nil {
		res.SellingPrice = *vres.SellingPrice
	}
	return res
}

// newStoredProductView projects result type StoredProduct to projected type
// StoredProductView using the "default" view.
func newStoredProductView(res *StoredProduct) *productviews.StoredProductView {
	vres := &productviews.StoredProductView{
		ID:            &res.ID,
		Name:          &res.Name,
		CurrencyUnit:  &res.CurrencyUnit,
		Description:   &res.Description,
		UpdatedTime:   &res.UpdatedTime,
		PurchasePrice: &res.PurchasePrice,
		SellingPrice:  &res.SellingPrice,
	}
	return vres
}

// newStoredProductViewTiny projects result type StoredProduct to projected
// type StoredProductView using the "tiny" view.
func newStoredProductViewTiny(res *StoredProduct) *productviews.StoredProductView {
	vres := &productviews.StoredProductView{
		ID:           &res.ID,
		Name:         &res.Name,
		CurrencyUnit: &res.CurrencyUnit,
		SellingPrice: &res.SellingPrice,
	}
	return vres
}
