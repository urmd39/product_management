// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product gRPC client CLI support package
//
// Command:
// $ goa gen goa-demo/design

package cli

import (
	"flag"
	"fmt"
	productc "goa-demo/gen/grpc/product/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `product (get-list-product|get-product|filter-product|create-product|update-product|remove-product)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` product get-list-product` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		productFlags = flag.NewFlagSet("product", flag.ContinueOnError)

		productGetListProductFlags = flag.NewFlagSet("get-list-product", flag.ExitOnError)

		productGetProductFlags       = flag.NewFlagSet("get-product", flag.ExitOnError)
		productGetProductMessageFlag = productGetProductFlags.String("message", "", "")
		productGetProductViewFlag    = productGetProductFlags.String("view", "", "")

		productFilterProductFlags            = flag.NewFlagSet("filter-product", flag.ExitOnError)
		productFilterProductCurrencyUnitFlag = productFilterProductFlags.String("currency-unit", "REQUIRED", "")

		productCreateProductFlags       = flag.NewFlagSet("create-product", flag.ExitOnError)
		productCreateProductMessageFlag = productCreateProductFlags.String("message", "", "")

		productUpdateProductFlags       = flag.NewFlagSet("update-product", flag.ExitOnError)
		productUpdateProductMessageFlag = productUpdateProductFlags.String("message", "", "")

		productRemoveProductFlags       = flag.NewFlagSet("remove-product", flag.ExitOnError)
		productRemoveProductMessageFlag = productRemoveProductFlags.String("message", "", "")
	)
	productFlags.Usage = productUsage
	productGetListProductFlags.Usage = productGetListProductUsage
	productGetProductFlags.Usage = productGetProductUsage
	productFilterProductFlags.Usage = productFilterProductUsage
	productCreateProductFlags.Usage = productCreateProductUsage
	productUpdateProductFlags.Usage = productUpdateProductUsage
	productRemoveProductFlags.Usage = productRemoveProductUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "product":
			svcf = productFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "product":
			switch epn {
			case "get-list-product":
				epf = productGetListProductFlags

			case "get-product":
				epf = productGetProductFlags

			case "filter-product":
				epf = productFilterProductFlags

			case "create-product":
				epf = productCreateProductFlags

			case "update-product":
				epf = productUpdateProductFlags

			case "remove-product":
				epf = productRemoveProductFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "product":
			c := productc.NewClient(cc, opts...)
			switch epn {
			case "get-list-product":
				endpoint = c.GetListProduct()
				data = nil
			case "get-product":
				endpoint = c.GetProduct()
				data, err = productc.BuildGetProductPayload(*productGetProductMessageFlag, *productGetProductViewFlag)
			case "filter-product":
				endpoint = c.FilterProduct()
				data, err = productc.BuildFilterProductPayload(*productFilterProductCurrencyUnitFlag)
			case "create-product":
				endpoint = c.CreateProduct()
				data, err = productc.BuildCreateProductPayload(*productCreateProductMessageFlag)
			case "update-product":
				endpoint = c.UpdateProduct()
				data, err = productc.BuildUpdateProductPayload(*productUpdateProductMessageFlag)
			case "remove-product":
				endpoint = c.RemoveProduct()
				data, err = productc.BuildRemoveProductPayload(*productRemoveProductMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// productUsage displays the usage of the product command and its subcommands.
func productUsage() {
	fmt.Fprintf(os.Stderr, `The product management service.
Usage:
    %s [globalflags] product COMMAND [flags]

COMMAND:
    get-list-product: GetListProduct implements getListProduct.
    get-product: GetProduct implements getProduct.
    filter-product: FilterProduct implements filterProduct.
    create-product: CreateProduct implements createProduct.
    update-product: UpdateProduct implements updateProduct.
    remove-product: Remove product from storage

Additional help:
    %s product COMMAND --help
`, os.Args[0], os.Args[0])
}
func productGetListProductUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] product get-list-product

GetListProduct implements getListProduct.

Example:
    `+os.Args[0]+` product get-list-product
`, os.Args[0])
}

func productGetProductUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] product get-product -message JSON -view STRING

GetProduct implements getProduct.
    -message JSON: 
    -view STRING: 

Example:
    `+os.Args[0]+` product get-product --message '{
      "id": 287285371201450806
   }' --view "default"
`, os.Args[0])
}

func productFilterProductUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] product filter-product -currency-unit STRING

FilterProduct implements filterProduct.
    -currency-unit STRING: 

Example:
    `+os.Args[0]+` product filter-product --currency-unit "Molestiae facilis."
`, os.Args[0])
}

func productCreateProductUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] product create-product -message JSON

CreateProduct implements createProduct.
    -message JSON: 

Example:
    `+os.Args[0]+` product create-product --message '{
      "currency_unit": "Modi aliquid non.",
      "description": "Eos voluptate in.",
      "name": "Blue\'s Cuvee",
      "purchase_price": 0.2030375670316061,
      "selling_price": 0.24227437102930335,
      "updated_time": "Dolorem iure qui quasi."
   }'
`, os.Args[0])
}

func productUpdateProductUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] product update-product -message JSON

UpdateProduct implements updateProduct.
    -message JSON: 

Example:
    `+os.Args[0]+` product update-product --message '{
      "id": 2439857911910992395,
      "product": {
         "currency_unit": "Facilis quisquam suscipit magnam magnam quidem.",
         "description": "Aut sed quae dolores.",
         "name": "Blue\'s Cuvee",
         "purchase_price": 0.6121581005022516,
         "selling_price": 0.00734776034275089,
         "updated_time": "Harum incidunt minus."
      }
   }'
`, os.Args[0])
}

func productRemoveProductUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] product remove-product -message JSON

Remove product from storage
    -message JSON: 

Example:
    `+os.Args[0]+` product remove-product --message '{
      "id": 8160317928609962447
   }'
`, os.Args[0])
}
