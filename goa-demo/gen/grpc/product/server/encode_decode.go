// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product gRPC server encoders and decoders
//
// Command:
// $ goa gen goa-demo/design

package server

import (
	"context"
	productpb "goa-demo/gen/grpc/product/pb"
	product "goa-demo/gen/product"
	productviews "goa-demo/gen/product/views"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeGetListProductResponse encodes responses from the "product" service
// "getListProduct" endpoint.
func EncodeGetListProductResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(productviews.StoredProductCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "getListProduct", "productviews.StoredProductCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewStoredProductCollection(result)
	return resp, nil
}

// EncodeGetProductResponse encodes responses from the "product" service
// "getProduct" endpoint.
func EncodeGetProductResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*productviews.StoredProduct)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "getProduct", "*productviews.StoredProduct", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewGetProductResponse(result)
	return resp, nil
}

// DecodeGetProductRequest decodes requests sent to "product" service
// "getProduct" endpoint.
func DecodeGetProductRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		view *string
		err  error
	)
	{
		if vals := md.Get("view"); len(vals) > 0 {
			view = &vals[0]
		}
		if view != nil {
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *productpb.GetProductRequest
		ok      bool
	)
	{
		if message, ok = v.(*productpb.GetProductRequest); !ok {
			return nil, goagrpc.ErrInvalidType("product", "getProduct", "*productpb.GetProductRequest", v)
		}
	}
	var payload *product.GetProductPayload
	{
		payload = NewGetProductPayload(message, view)
	}
	return payload, nil
}

// EncodeFilterProductResponse encodes responses from the "product" service
// "filterProduct" endpoint.
func EncodeFilterProductResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(productviews.StoredProductCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "filterProduct", "productviews.StoredProductCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewStoredProductCollection(result)
	return resp, nil
}

// DecodeFilterProductRequest decodes requests sent to "product" service
// "filterProduct" endpoint.
func DecodeFilterProductRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		currencyUnit string
		err          error
	)
	{
		if vals := md.Get("currency_unit"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("currency_unit", "metadata"))
		} else {
			currencyUnit = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var payload *product.FilterProductPayload
	{
		payload = NewFilterProductPayload(currencyUnit)
	}
	return payload, nil
}

// EncodeCreateProductResponse encodes responses from the "product" service
// "createProduct" endpoint.
func EncodeCreateProductResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "createProduct", "string", v)
	}
	resp := NewCreateProductResponse(result)
	return resp, nil
}

// DecodeCreateProductRequest decodes requests sent to "product" service
// "createProduct" endpoint.
func DecodeCreateProductRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *productpb.CreateProductRequest
		ok      bool
	)
	{
		if message, ok = v.(*productpb.CreateProductRequest); !ok {
			return nil, goagrpc.ErrInvalidType("product", "createProduct", "*productpb.CreateProductRequest", v)
		}
		if err := ValidateCreateProductRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *product.Product
	{
		payload = NewCreateProductPayload(message)
	}
	return payload, nil
}

// EncodeUpdateProductResponse encodes responses from the "product" service
// "updateProduct" endpoint.
func EncodeUpdateProductResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*productviews.StoredProduct)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "updateProduct", "*productviews.StoredProduct", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewUpdateProductResponse(result)
	return resp, nil
}

// DecodeUpdateProductRequest decodes requests sent to "product" service
// "updateProduct" endpoint.
func DecodeUpdateProductRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *productpb.UpdateProductRequest
		ok      bool
	)
	{
		if message, ok = v.(*productpb.UpdateProductRequest); !ok {
			return nil, goagrpc.ErrInvalidType("product", "updateProduct", "*productpb.UpdateProductRequest", v)
		}
		if err := ValidateUpdateProductRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *product.UpdateProductPayload
	{
		payload = NewUpdateProductPayload(message)
	}
	return payload, nil
}

// EncodeRemoveProductResponse encodes responses from the "product" service
// "removeProduct" endpoint.
func EncodeRemoveProductResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewRemoveProductResponse()
	return resp, nil
}

// DecodeRemoveProductRequest decodes requests sent to "product" service
// "removeProduct" endpoint.
func DecodeRemoveProductRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *productpb.RemoveProductRequest
		ok      bool
	)
	{
		if message, ok = v.(*productpb.RemoveProductRequest); !ok {
			return nil, goagrpc.ErrInvalidType("product", "removeProduct", "*productpb.RemoveProductRequest", v)
		}
	}
	var payload *product.RemoveProductPayload
	{
		payload = NewRemoveProductPayload(message)
	}
	return payload, nil
}
