// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product gRPC server types
//
// Command:
// $ goa gen goa-demo/design

package server

import (
	productpb "goa-demo/gen/grpc/product/pb"
	product "goa-demo/gen/product"
	productviews "goa-demo/gen/product/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewStoredProductCollection builds the gRPC response type from the result of
// the "getListProduct" endpoint of the "product" service.
func NewStoredProductCollection(result productviews.StoredProductCollectionView) *productpb.StoredProductCollection {
	message := &productpb.StoredProductCollection{}
	message.Field = make([]*productpb.StoredProduct, len(result))
	for i, val := range result {
		message.Field[i] = &productpb.StoredProduct{}
		if val.ID != nil {
			message.Field[i].Id = int32(*val.ID)
		}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.CurrencyUnit != nil {
			message.Field[i].CurrencyUnit = *val.CurrencyUnit
		}
		if val.Description != nil {
			message.Field[i].Description = *val.Description
		}
		if val.UpdatedTime != nil {
			message.Field[i].UpdatedTime = *val.UpdatedTime
		}
		if val.PurchasePrice != nil {
			message.Field[i].PurchasePrice = *val.PurchasePrice
		}
		if val.SellingPrice != nil {
			message.Field[i].SellingPrice = *val.SellingPrice
		}
	}
	return message
}

// NewGetProductPayload builds the payload of the "getProduct" endpoint of the
// "product" service from the gRPC request type.
func NewGetProductPayload(message *productpb.GetProductRequest, view *string) *product.GetProductPayload {
	v := &product.GetProductPayload{
		ID: int(message.Id),
	}
	v.View = view
	return v
}

// NewGetProductResponse builds the gRPC response type from the result of the
// "getProduct" endpoint of the "product" service.
func NewGetProductResponse(result *productviews.StoredProductView) *productpb.GetProductResponse {
	message := &productpb.GetProductResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.CurrencyUnit != nil {
		message.CurrencyUnit = *result.CurrencyUnit
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.UpdatedTime != nil {
		message.UpdatedTime = *result.UpdatedTime
	}
	if result.PurchasePrice != nil {
		message.PurchasePrice = *result.PurchasePrice
	}
	if result.SellingPrice != nil {
		message.SellingPrice = *result.SellingPrice
	}
	return message
}

// NewGetProductNotFoundError builds the gRPC error response type from the
// error of the "getProduct" endpoint of the "product" service.
func NewGetProductNotFoundError(er *product.NotFound) *productpb.GetProductNotFoundError {
	message := &productpb.GetProductNotFoundError{
		Message_: er.Message,
		Id:       int32(er.ID),
	}
	return message
}

// NewFilterProductPayload builds the payload of the "filterProduct" endpoint
// of the "product" service from the gRPC request type.
func NewFilterProductPayload(currencyUnit string) *product.FilterProductPayload {
	v := &product.FilterProductPayload{}
	v.CurrencyUnit = currencyUnit
	return v
}

// NewFilterProductNotFoundError builds the gRPC error response type from the
// error of the "filterProduct" endpoint of the "product" service.
func NewFilterProductNotFoundError(er *product.NotFound) *productpb.FilterProductNotFoundError {
	message := &productpb.FilterProductNotFoundError{
		Message_: er.Message,
		Id:       int32(er.ID),
	}
	return message
}

// NewCreateProductPayload builds the payload of the "createProduct" endpoint
// of the "product" service from the gRPC request type.
func NewCreateProductPayload(message *productpb.CreateProductRequest) *product.Product {
	v := &product.Product{
		Name:          message.Name,
		CurrencyUnit:  message.CurrencyUnit,
		Description:   message.Description,
		UpdatedTime:   message.UpdatedTime,
		PurchasePrice: message.PurchasePrice,
		SellingPrice:  message.SellingPrice,
	}
	return v
}

// NewCreateProductResponse builds the gRPC response type from the result of
// the "createProduct" endpoint of the "product" service.
func NewCreateProductResponse(result string) *productpb.CreateProductResponse {
	message := &productpb.CreateProductResponse{}
	message.Field = result
	return message
}

// NewUpdateProductPayload builds the payload of the "updateProduct" endpoint
// of the "product" service from the gRPC request type.
func NewUpdateProductPayload(message *productpb.UpdateProductRequest) *product.UpdateProductPayload {
	v := &product.UpdateProductPayload{
		ID: int(message.Id),
	}
	if message.Product != nil {
		v.Product = protobufProductpbProduct2ToProductProduct(message.Product)
	}
	return v
}

// NewUpdateProductResponse builds the gRPC response type from the result of
// the "updateProduct" endpoint of the "product" service.
func NewUpdateProductResponse(result *productviews.StoredProductView) *productpb.UpdateProductResponse {
	message := &productpb.UpdateProductResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.CurrencyUnit != nil {
		message.CurrencyUnit = *result.CurrencyUnit
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.UpdatedTime != nil {
		message.UpdatedTime = *result.UpdatedTime
	}
	if result.PurchasePrice != nil {
		message.PurchasePrice = *result.PurchasePrice
	}
	if result.SellingPrice != nil {
		message.SellingPrice = *result.SellingPrice
	}
	return message
}

// NewRemoveProductPayload builds the payload of the "removeProduct" endpoint
// of the "product" service from the gRPC request type.
func NewRemoveProductPayload(message *productpb.RemoveProductRequest) *product.RemoveProductPayload {
	v := &product.RemoveProductPayload{
		ID: int(message.Id),
	}
	return v
}

// NewRemoveProductResponse builds the gRPC response type from the result of
// the "removeProduct" endpoint of the "product" service.
func NewRemoveProductResponse() *productpb.RemoveProductResponse {
	message := &productpb.RemoveProductResponse{}
	return message
}

// ValidateCreateProductRequest runs the validations defined on
// CreateProductRequest.
func ValidateCreateProductRequest(message *productpb.CreateProductRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	return
}

// ValidateUpdateProductRequest runs the validations defined on
// UpdateProductRequest.
func ValidateUpdateProductRequest(message *productpb.UpdateProductRequest) (err error) {
	if message.Product == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product", "message"))
	}
	if message.Product != nil {
		if err2 := ValidateProduct2(message.Product); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProduct2 runs the validations defined on Product2.
func ValidateProduct2(message *productpb.Product2) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	return
}

// protobufProductpbProduct2ToProductProduct builds a value of type
// *product.Product from a value of type *productpb.Product2.
func protobufProductpbProduct2ToProductProduct(v *productpb.Product2) *product.Product {
	res := &product.Product{
		Name:          v.Name,
		CurrencyUnit:  v.CurrencyUnit,
		Description:   v.Description,
		UpdatedTime:   v.UpdatedTime,
		PurchasePrice: v.PurchasePrice,
		SellingPrice:  v.SellingPrice,
	}

	return res
}

// svcProductProductToProductpbProduct2 builds a value of type
// *productpb.Product2 from a value of type *product.Product.
func svcProductProductToProductpbProduct2(v *product.Product) *productpb.Product2 {
	res := &productpb.Product2{
		Name:          v.Name,
		CurrencyUnit:  v.CurrencyUnit,
		Description:   v.Description,
		UpdatedTime:   v.UpdatedTime,
		PurchasePrice: v.PurchasePrice,
		SellingPrice:  v.SellingPrice,
	}

	return res
}
