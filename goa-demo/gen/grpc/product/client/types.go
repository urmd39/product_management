// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product gRPC client types
//
// Command:
// $ goa gen goa-demo/design

package client

import (
	productpb "goa-demo/gen/grpc/product/pb"
	product "goa-demo/gen/product"
	productviews "goa-demo/gen/product/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewGetListProductRequest builds the gRPC request type from the payload of
// the "getListProduct" endpoint of the "product" service.
func NewGetListProductRequest() *productpb.GetListProductRequest {
	message := &productpb.GetListProductRequest{}
	return message
}

// NewGetListProductResult builds the result type of the "getListProduct"
// endpoint of the "product" service from the gRPC response type.
func NewGetListProductResult(message *productpb.StoredProductCollection) productviews.StoredProductCollectionView {
	result := make([]*productviews.StoredProductView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &productviews.StoredProductView{
			Name:          &val.Name,
			CurrencyUnit:  &val.CurrencyUnit,
			Description:   &val.Description,
			UpdatedTime:   &val.UpdatedTime,
			PurchasePrice: &val.PurchasePrice,
			SellingPrice:  &val.SellingPrice,
		}
		idptr := int(val.Id)
		result[i].ID = &idptr
	}
	return result
}

// NewGetProductRequest builds the gRPC request type from the payload of the
// "getProduct" endpoint of the "product" service.
func NewGetProductRequest(payload *product.GetProductPayload) *productpb.GetProductRequest {
	message := &productpb.GetProductRequest{
		Id: int32(payload.ID),
	}
	return message
}

// NewGetProductResult builds the result type of the "getProduct" endpoint of
// the "product" service from the gRPC response type.
func NewGetProductResult(message *productpb.GetProductResponse) *productviews.StoredProductView {
	result := &productviews.StoredProductView{
		Name:          &message.Name,
		CurrencyUnit:  &message.CurrencyUnit,
		Description:   &message.Description,
		UpdatedTime:   &message.UpdatedTime,
		PurchasePrice: &message.PurchasePrice,
		SellingPrice:  &message.SellingPrice,
	}
	idptr := int(message.Id)
	result.ID = &idptr
	return result
}

// NewGetProductNotFoundError builds the error type of the "getProduct"
// endpoint of the "product" service from the gRPC error response type.
func NewGetProductNotFoundError(message *productpb.GetProductNotFoundError) *product.NotFound {
	er := &product.NotFound{
		Message: message.Message_,
		ID:      int(message.Id),
	}
	return er
}

// NewFilterProductRequest builds the gRPC request type from the payload of the
// "filterProduct" endpoint of the "product" service.
func NewFilterProductRequest() *productpb.FilterProductRequest {
	message := &productpb.FilterProductRequest{}
	return message
}

// NewFilterProductResult builds the result type of the "filterProduct"
// endpoint of the "product" service from the gRPC response type.
func NewFilterProductResult(message *productpb.StoredProductCollection) productviews.StoredProductCollectionView {
	result := make([]*productviews.StoredProductView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &productviews.StoredProductView{
			Name:          &val.Name,
			CurrencyUnit:  &val.CurrencyUnit,
			Description:   &val.Description,
			UpdatedTime:   &val.UpdatedTime,
			PurchasePrice: &val.PurchasePrice,
			SellingPrice:  &val.SellingPrice,
		}
		idptr := int(val.Id)
		result[i].ID = &idptr
	}
	return result
}

// NewFilterProductNotFoundError builds the error type of the "filterProduct"
// endpoint of the "product" service from the gRPC error response type.
func NewFilterProductNotFoundError(message *productpb.FilterProductNotFoundError) *product.NotFound {
	er := &product.NotFound{
		Message: message.Message_,
		ID:      int(message.Id),
	}
	return er
}

// NewCreateProductRequest builds the gRPC request type from the payload of the
// "createProduct" endpoint of the "product" service.
func NewCreateProductRequest(payload *product.Product) *productpb.CreateProductRequest {
	message := &productpb.CreateProductRequest{
		Name:          payload.Name,
		CurrencyUnit:  payload.CurrencyUnit,
		Description:   payload.Description,
		UpdatedTime:   payload.UpdatedTime,
		PurchasePrice: payload.PurchasePrice,
		SellingPrice:  payload.SellingPrice,
	}
	return message
}

// NewCreateProductResult builds the result type of the "createProduct"
// endpoint of the "product" service from the gRPC response type.
func NewCreateProductResult(message *productpb.CreateProductResponse) string {
	result := message.Field
	return result
}

// NewUpdateProductRequest builds the gRPC request type from the payload of the
// "updateProduct" endpoint of the "product" service.
func NewUpdateProductRequest(payload *product.UpdateProductPayload) *productpb.UpdateProductRequest {
	message := &productpb.UpdateProductRequest{
		Id: int32(payload.ID),
	}
	if payload.Product != nil {
		message.Product = svcProductProductToProductpbProduct2(payload.Product)
	}
	return message
}

// NewUpdateProductResult builds the result type of the "updateProduct"
// endpoint of the "product" service from the gRPC response type.
func NewUpdateProductResult(message *productpb.UpdateProductResponse) *productviews.StoredProductView {
	result := &productviews.StoredProductView{
		Name:          &message.Name,
		CurrencyUnit:  &message.CurrencyUnit,
		Description:   &message.Description,
		UpdatedTime:   &message.UpdatedTime,
		PurchasePrice: &message.PurchasePrice,
		SellingPrice:  &message.SellingPrice,
	}
	idptr := int(message.Id)
	result.ID = &idptr
	return result
}

// NewRemoveProductRequest builds the gRPC request type from the payload of the
// "removeProduct" endpoint of the "product" service.
func NewRemoveProductRequest(payload *product.RemoveProductPayload) *productpb.RemoveProductRequest {
	message := &productpb.RemoveProductRequest{
		Id: int32(payload.ID),
	}
	return message
}

// ValidateStoredProductCollection runs the validations defined on
// StoredProductCollection.
func ValidateStoredProductCollection(message *productpb.StoredProductCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredProduct(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredProduct runs the validations defined on StoredProduct.
func ValidateStoredProduct(message *productpb.StoredProduct) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	return
}

// ValidateGetProductResponse runs the validations defined on
// GetProductResponse.
func ValidateGetProductResponse(message *productpb.GetProductResponse) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	return
}

// ValidateUpdateProductResponse runs the validations defined on
// UpdateProductResponse.
func ValidateUpdateProductResponse(message *productpb.UpdateProductResponse) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	return
}

// protobufProductpbProduct2ToProductProduct builds a value of type
// *product.Product from a value of type *productpb.Product2.
func protobufProductpbProduct2ToProductProduct(v *productpb.Product2) *product.Product {
	res := &product.Product{
		Name:          v.Name,
		CurrencyUnit:  v.CurrencyUnit,
		Description:   v.Description,
		UpdatedTime:   v.UpdatedTime,
		PurchasePrice: v.PurchasePrice,
		SellingPrice:  v.SellingPrice,
	}

	return res
}

// svcProductProductToProductpbProduct2 builds a value of type
// *productpb.Product2 from a value of type *product.Product.
func svcProductProductToProductpbProduct2(v *product.Product) *productpb.Product2 {
	res := &productpb.Product2{
		Name:          v.Name,
		CurrencyUnit:  v.CurrencyUnit,
		Description:   v.Description,
		UpdatedTime:   v.UpdatedTime,
		PurchasePrice: v.PurchasePrice,
		SellingPrice:  v.SellingPrice,
	}

	return res
}
