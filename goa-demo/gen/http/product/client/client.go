// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product client HTTP transport
//
// Command:
// $ goa gen goa-demo/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the product service endpoint HTTP clients.
type Client struct {
	// GetListProduct Doer is the HTTP client used to make requests to the
	// getListProduct endpoint.
	GetListProductDoer goahttp.Doer

	// GetProduct Doer is the HTTP client used to make requests to the getProduct
	// endpoint.
	GetProductDoer goahttp.Doer

	// FilterProduct Doer is the HTTP client used to make requests to the
	// filterProduct endpoint.
	FilterProductDoer goahttp.Doer

	// CreateProduct Doer is the HTTP client used to make requests to the
	// createProduct endpoint.
	CreateProductDoer goahttp.Doer

	// UpdateProduct Doer is the HTTP client used to make requests to the
	// updateProduct endpoint.
	UpdateProductDoer goahttp.Doer

	// RemoveProduct Doer is the HTTP client used to make requests to the
	// removeProduct endpoint.
	RemoveProductDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the product service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetListProductDoer:  doer,
		GetProductDoer:      doer,
		FilterProductDoer:   doer,
		CreateProductDoer:   doer,
		UpdateProductDoer:   doer,
		RemoveProductDoer:   doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GetListProduct returns an endpoint that makes HTTP requests to the product
// service getListProduct server.
func (c *Client) GetListProduct() goa.Endpoint {
	var (
		decodeResponse = DecodeGetListProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetListProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetListProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "getListProduct", err)
		}
		return decodeResponse(resp)
	}
}

// GetProduct returns an endpoint that makes HTTP requests to the product
// service getProduct server.
func (c *Client) GetProduct() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetProductRequest(c.encoder)
		decodeResponse = DecodeGetProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "getProduct", err)
		}
		return decodeResponse(resp)
	}
}

// FilterProduct returns an endpoint that makes HTTP requests to the product
// service filterProduct server.
func (c *Client) FilterProduct() goa.Endpoint {
	var (
		encodeRequest  = EncodeFilterProductRequest(c.encoder)
		decodeResponse = DecodeFilterProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFilterProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FilterProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "filterProduct", err)
		}
		return decodeResponse(resp)
	}
}

// CreateProduct returns an endpoint that makes HTTP requests to the product
// service createProduct server.
func (c *Client) CreateProduct() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateProductRequest(c.encoder)
		decodeResponse = DecodeCreateProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "createProduct", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateProduct returns an endpoint that makes HTTP requests to the product
// service updateProduct server.
func (c *Client) UpdateProduct() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateProductRequest(c.encoder)
		decodeResponse = DecodeUpdateProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "updateProduct", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveProduct returns an endpoint that makes HTTP requests to the product
// service removeProduct server.
func (c *Client) RemoveProduct() goa.Endpoint {
	var (
		decodeResponse = DecodeRemoveProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRemoveProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "removeProduct", err)
		}
		return decodeResponse(resp)
	}
}
