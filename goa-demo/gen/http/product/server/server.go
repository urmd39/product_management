// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product HTTP server
//
// Command:
// $ goa gen goa-demo/design

package server

import (
	"context"
	product "goa-demo/gen/product"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the product service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	GetListProduct     http.Handler
	GetProduct         http.Handler
	FilterProduct      http.Handler
	CreateProduct      http.Handler
	UpdateProduct      http.Handler
	RemoveProduct      http.Handler
	GenHTTPOpenapiJSON http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the product service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *product.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapiJSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapiJSON == nil {
		fileSystemGenHTTPOpenapiJSON = http.Dir(".")
	}
	return &Server{
		Mounts: []*MountPoint{
			{"GetListProduct", "GET", "/product"},
			{"GetProduct", "GET", "/product/{id}"},
			{"FilterProduct", "GET", "/product/filter"},
			{"CreateProduct", "POST", "/product"},
			{"UpdateProduct", "PUT", "/product/{id}"},
			{"RemoveProduct", "DELETE", "/product/{id}"},
			{"./gen/http/openapi.json", "GET", "/openapi.json"},
		},
		GetListProduct:     NewGetListProductHandler(e.GetListProduct, mux, decoder, encoder, errhandler, formatter),
		GetProduct:         NewGetProductHandler(e.GetProduct, mux, decoder, encoder, errhandler, formatter),
		FilterProduct:      NewFilterProductHandler(e.FilterProduct, mux, decoder, encoder, errhandler, formatter),
		CreateProduct:      NewCreateProductHandler(e.CreateProduct, mux, decoder, encoder, errhandler, formatter),
		UpdateProduct:      NewUpdateProductHandler(e.UpdateProduct, mux, decoder, encoder, errhandler, formatter),
		RemoveProduct:      NewRemoveProductHandler(e.RemoveProduct, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapiJSON: http.FileServer(fileSystemGenHTTPOpenapiJSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "product" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetListProduct = m(s.GetListProduct)
	s.GetProduct = m(s.GetProduct)
	s.FilterProduct = m(s.FilterProduct)
	s.CreateProduct = m(s.CreateProduct)
	s.UpdateProduct = m(s.UpdateProduct)
	s.RemoveProduct = m(s.RemoveProduct)
}

// Mount configures the mux to serve the product endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetListProductHandler(mux, h.GetListProduct)
	MountGetProductHandler(mux, h.GetProduct)
	MountFilterProductHandler(mux, h.FilterProduct)
	MountCreateProductHandler(mux, h.CreateProduct)
	MountUpdateProductHandler(mux, h.UpdateProduct)
	MountRemoveProductHandler(mux, h.RemoveProduct)
	MountGenHTTPOpenapiJSON(mux, goahttp.Replace("", "/./gen/http/openapi.json", h.GenHTTPOpenapiJSON))
}

// MountGetListProductHandler configures the mux to serve the "product" service
// "getListProduct" endpoint.
func MountGetListProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/product", f)
}

// NewGetListProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "product" service "getListProduct" endpoint.
func NewGetListProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetListProductResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getListProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "product")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetProductHandler configures the mux to serve the "product" service
// "getProduct" endpoint.
func MountGetProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/product/{id}", f)
}

// NewGetProductHandler creates a HTTP handler which loads the HTTP request and
// calls the "product" service "getProduct" endpoint.
func NewGetProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetProductRequest(mux, decoder)
		encodeResponse = EncodeGetProductResponse(encoder)
		encodeError    = EncodeGetProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFilterProductHandler configures the mux to serve the "product" service
// "filterProduct" endpoint.
func MountFilterProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/product/filter", f)
}

// NewFilterProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "product" service "filterProduct" endpoint.
func NewFilterProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFilterProductRequest(mux, decoder)
		encodeResponse = EncodeFilterProductResponse(encoder)
		encodeError    = EncodeFilterProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "filterProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateProductHandler configures the mux to serve the "product" service
// "createProduct" endpoint.
func MountCreateProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/product", f)
}

// NewCreateProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "product" service "createProduct" endpoint.
func NewCreateProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProductRequest(mux, decoder)
		encodeResponse = EncodeCreateProductResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateProductHandler configures the mux to serve the "product" service
// "updateProduct" endpoint.
func MountUpdateProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/product/{id}", f)
}

// NewUpdateProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "product" service "updateProduct" endpoint.
func NewUpdateProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateProductRequest(mux, decoder)
		encodeResponse = EncodeUpdateProductResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRemoveProductHandler configures the mux to serve the "product" service
// "removeProduct" endpoint.
func MountRemoveProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/product/{id}", f)
}

// NewRemoveProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "product" service "removeProduct" endpoint.
func NewRemoveProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRemoveProductRequest(mux, decoder)
		encodeResponse = EncodeRemoveProductResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "removeProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}
