// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product HTTP server encoders and decoders
//
// Command:
// $ goa gen goa-demo/design

package server

import (
	"context"
	product "goa-demo/gen/product"
	productviews "goa-demo/gen/product/views"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetListProductResponse returns an encoder for responses returned by
// the product getListProduct endpoint.
func EncodeGetListProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(productviews.StoredProductCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewStoredProductResponseCollection(res.Projected)
		case "tiny":
			body = NewStoredProductResponseTinyCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetProductResponse returns an encoder for responses returned by the
// product getProduct endpoint.
func EncodeGetProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*productviews.StoredProduct)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewGetProductResponseBody(res.Projected)
		case "tiny":
			body = NewGetProductResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetProductRequest returns a decoder for requests sent to the product
// getProduct endpoint.
func DecodeGetProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   int
			view *string
			err  error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetProductPayload(id, view)

		return payload, nil
	}
}

// EncodeGetProductError returns an encoder for errors returned by the
// getProduct product endpoint.
func EncodeGetProductError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*product.NotFound)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetProductNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeFilterProductResponse returns an encoder for responses returned by the
// product filterProduct endpoint.
func EncodeFilterProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(productviews.StoredProductCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewStoredProductResponseCollection(res.Projected)
		case "tiny":
			body = NewStoredProductResponseTinyCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFilterProductRequest returns a decoder for requests sent to the
// product filterProduct endpoint.
func DecodeFilterProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			currencyUnit string
			err          error
		)
		currencyUnit = r.URL.Query().Get("currency_unit")
		if currencyUnit == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("currency_unit", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewFilterProductPayload(currencyUnit)

		return payload, nil
	}
}

// EncodeFilterProductError returns an encoder for errors returned by the
// filterProduct product endpoint.
func EncodeFilterProductError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*product.NotFound)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFilterProductNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateProductResponse returns an encoder for responses returned by the
// product createProduct endpoint.
func EncodeCreateProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateProductRequest returns a decoder for requests sent to the
// product createProduct endpoint.
func DecodeCreateProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateProductRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateProductRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateProductProduct(&body)

		return payload, nil
	}
}

// EncodeUpdateProductResponse returns an encoder for responses returned by the
// product updateProduct endpoint.
func EncodeUpdateProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*productviews.StoredProduct)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewUpdateProductResponseBody(res.Projected)
		case "tiny":
			body = NewUpdateProductResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateProductRequest returns a decoder for requests sent to the
// product updateProduct endpoint.
func DecodeUpdateProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateProductRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateProductRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateProductPayload(&body, id)

		return payload, nil
	}
}

// EncodeRemoveProductResponse returns an encoder for responses returned by the
// product removeProduct endpoint.
func EncodeRemoveProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeRemoveProductRequest returns a decoder for requests sent to the
// product removeProduct endpoint.
func DecodeRemoveProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewRemoveProductPayload(id)

		return payload, nil
	}
}

// marshalProductviewsStoredProductViewToStoredProductResponse builds a value
// of type *StoredProductResponse from a value of type
// *productviews.StoredProductView.
func marshalProductviewsStoredProductViewToStoredProductResponse(v *productviews.StoredProductView) *StoredProductResponse {
	res := &StoredProductResponse{
		ID:            *v.ID,
		Name:          *v.Name,
		CurrencyUnit:  *v.CurrencyUnit,
		Description:   *v.Description,
		UpdatedTime:   *v.UpdatedTime,
		PurchasePrice: *v.PurchasePrice,
		SellingPrice:  *v.SellingPrice,
	}

	return res
}

// marshalProductviewsStoredProductViewToStoredProductResponseTiny builds a
// value of type *StoredProductResponseTiny from a value of type
// *productviews.StoredProductView.
func marshalProductviewsStoredProductViewToStoredProductResponseTiny(v *productviews.StoredProductView) *StoredProductResponseTiny {
	res := &StoredProductResponseTiny{
		ID:           *v.ID,
		Name:         *v.Name,
		CurrencyUnit: *v.CurrencyUnit,
		SellingPrice: *v.SellingPrice,
	}

	return res
}

// unmarshalProductRequestBodyToProductProduct builds a value of type
// *product.Product from a value of type *ProductRequestBody.
func unmarshalProductRequestBodyToProductProduct(v *ProductRequestBody) *product.Product {
	res := &product.Product{
		Name:          *v.Name,
		CurrencyUnit:  *v.CurrencyUnit,
		Description:   *v.Description,
		UpdatedTime:   *v.UpdatedTime,
		PurchasePrice: *v.PurchasePrice,
		SellingPrice:  *v.SellingPrice,
	}

	return res
}
