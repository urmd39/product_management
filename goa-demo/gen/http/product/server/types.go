// Code generated by goa v3.4.3, DO NOT EDIT.
//
// product HTTP server types
//
// Command:
// $ goa gen goa-demo/design

package server

import (
	product "goa-demo/gen/product"
	productviews "goa-demo/gen/product/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateProductRequestBody is the type of the "product" service
// "createProduct" endpoint HTTP request body.
type CreateProductRequestBody struct {
	// Name of product
	Name          *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	CurrencyUnit  *string  `form:"currency_unit,omitempty" json:"currency_unit,omitempty" xml:"currency_unit,omitempty"`
	Description   *string  `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	UpdatedTime   *string  `form:"updated_time,omitempty" json:"updated_time,omitempty" xml:"updated_time,omitempty"`
	PurchasePrice *float64 `form:"purchase_price,omitempty" json:"purchase_price,omitempty" xml:"purchase_price,omitempty"`
	SellingPrice  *float64 `form:"selling_price,omitempty" json:"selling_price,omitempty" xml:"selling_price,omitempty"`
}

// UpdateProductRequestBody is the type of the "product" service
// "updateProduct" endpoint HTTP request body.
type UpdateProductRequestBody struct {
	// Product Updated
	Product *ProductRequestBody `form:"product,omitempty" json:"product,omitempty" xml:"product,omitempty"`
}

// StoredProductResponseCollection is the type of the "product" service
// "getListProduct" endpoint HTTP response body.
type StoredProductResponseCollection []*StoredProductResponse

// StoredProductResponseTinyCollection is the type of the "product" service
// "getListProduct" endpoint HTTP response body.
type StoredProductResponseTinyCollection []*StoredProductResponseTiny

// GetProductResponseBody is the type of the "product" service "getProduct"
// endpoint HTTP response body.
type GetProductResponseBody struct {
	// ID is the unique id of the bottle.
	ID int `form:"id" json:"id" xml:"id"`
	// Name of product
	Name          string  `form:"name" json:"name" xml:"name"`
	CurrencyUnit  string  `form:"currency_unit" json:"currency_unit" xml:"currency_unit"`
	Description   string  `form:"description" json:"description" xml:"description"`
	UpdatedTime   string  `form:"updated_time" json:"updated_time" xml:"updated_time"`
	PurchasePrice float64 `form:"purchase_price" json:"purchase_price" xml:"purchase_price"`
	SellingPrice  float64 `form:"selling_price" json:"selling_price" xml:"selling_price"`
}

// GetProductResponseBodyTiny is the type of the "product" service "getProduct"
// endpoint HTTP response body.
type GetProductResponseBodyTiny struct {
	// ID is the unique id of the bottle.
	ID int `form:"id" json:"id" xml:"id"`
	// Name of product
	Name         string  `form:"name" json:"name" xml:"name"`
	CurrencyUnit string  `form:"currency_unit" json:"currency_unit" xml:"currency_unit"`
	SellingPrice float64 `form:"selling_price" json:"selling_price" xml:"selling_price"`
}

// UpdateProductResponseBody is the type of the "product" service
// "updateProduct" endpoint HTTP response body.
type UpdateProductResponseBody struct {
	// ID is the unique id of the bottle.
	ID int `form:"id" json:"id" xml:"id"`
	// Name of product
	Name          string  `form:"name" json:"name" xml:"name"`
	CurrencyUnit  string  `form:"currency_unit" json:"currency_unit" xml:"currency_unit"`
	Description   string  `form:"description" json:"description" xml:"description"`
	UpdatedTime   string  `form:"updated_time" json:"updated_time" xml:"updated_time"`
	PurchasePrice float64 `form:"purchase_price" json:"purchase_price" xml:"purchase_price"`
	SellingPrice  float64 `form:"selling_price" json:"selling_price" xml:"selling_price"`
}

// UpdateProductResponseBodyTiny is the type of the "product" service
// "updateProduct" endpoint HTTP response body.
type UpdateProductResponseBodyTiny struct {
	// ID is the unique id of the bottle.
	ID int `form:"id" json:"id" xml:"id"`
	// Name of product
	Name         string  `form:"name" json:"name" xml:"name"`
	CurrencyUnit string  `form:"currency_unit" json:"currency_unit" xml:"currency_unit"`
	SellingPrice float64 `form:"selling_price" json:"selling_price" xml:"selling_price"`
}

// GetProductNotFoundResponseBody is the type of the "product" service
// "getProduct" endpoint HTTP response body for the "not_found" error.
type GetProductNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing product
	ID int `form:"id" json:"id" xml:"id"`
}

// FilterProductNotFoundResponseBody is the type of the "product" service
// "filterProduct" endpoint HTTP response body for the "not_found" error.
type FilterProductNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing product
	ID int `form:"id" json:"id" xml:"id"`
}

// StoredProductResponse is used to define fields on response body types.
type StoredProductResponse struct {
	// ID is the unique id of the bottle.
	ID int `form:"id" json:"id" xml:"id"`
	// Name of product
	Name          string  `form:"name" json:"name" xml:"name"`
	CurrencyUnit  string  `form:"currency_unit" json:"currency_unit" xml:"currency_unit"`
	Description   string  `form:"description" json:"description" xml:"description"`
	UpdatedTime   string  `form:"updated_time" json:"updated_time" xml:"updated_time"`
	PurchasePrice float64 `form:"purchase_price" json:"purchase_price" xml:"purchase_price"`
	SellingPrice  float64 `form:"selling_price" json:"selling_price" xml:"selling_price"`
}

// StoredProductResponseTiny is used to define fields on response body types.
type StoredProductResponseTiny struct {
	// ID is the unique id of the bottle.
	ID int `form:"id" json:"id" xml:"id"`
	// Name of product
	Name         string  `form:"name" json:"name" xml:"name"`
	CurrencyUnit string  `form:"currency_unit" json:"currency_unit" xml:"currency_unit"`
	SellingPrice float64 `form:"selling_price" json:"selling_price" xml:"selling_price"`
}

// ProductRequestBody is used to define fields on request body types.
type ProductRequestBody struct {
	// Name of product
	Name          *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	CurrencyUnit  *string  `form:"currency_unit,omitempty" json:"currency_unit,omitempty" xml:"currency_unit,omitempty"`
	Description   *string  `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	UpdatedTime   *string  `form:"updated_time,omitempty" json:"updated_time,omitempty" xml:"updated_time,omitempty"`
	PurchasePrice *float64 `form:"purchase_price,omitempty" json:"purchase_price,omitempty" xml:"purchase_price,omitempty"`
	SellingPrice  *float64 `form:"selling_price,omitempty" json:"selling_price,omitempty" xml:"selling_price,omitempty"`
}

// NewStoredProductResponseCollection builds the HTTP response body from the
// result of the "getListProduct" endpoint of the "product" service.
func NewStoredProductResponseCollection(res productviews.StoredProductCollectionView) StoredProductResponseCollection {
	body := make([]*StoredProductResponse, len(res))
	for i, val := range res {
		body[i] = marshalProductviewsStoredProductViewToStoredProductResponse(val)
	}
	return body
}

// NewStoredProductResponseTinyCollection builds the HTTP response body from
// the result of the "getListProduct" endpoint of the "product" service.
func NewStoredProductResponseTinyCollection(res productviews.StoredProductCollectionView) StoredProductResponseTinyCollection {
	body := make([]*StoredProductResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalProductviewsStoredProductViewToStoredProductResponseTiny(val)
	}
	return body
}

// NewGetProductResponseBody builds the HTTP response body from the result of
// the "getProduct" endpoint of the "product" service.
func NewGetProductResponseBody(res *productviews.StoredProductView) *GetProductResponseBody {
	body := &GetProductResponseBody{
		ID:            *res.ID,
		Name:          *res.Name,
		CurrencyUnit:  *res.CurrencyUnit,
		Description:   *res.Description,
		UpdatedTime:   *res.UpdatedTime,
		PurchasePrice: *res.PurchasePrice,
		SellingPrice:  *res.SellingPrice,
	}
	return body
}

// NewGetProductResponseBodyTiny builds the HTTP response body from the result
// of the "getProduct" endpoint of the "product" service.
func NewGetProductResponseBodyTiny(res *productviews.StoredProductView) *GetProductResponseBodyTiny {
	body := &GetProductResponseBodyTiny{
		ID:           *res.ID,
		Name:         *res.Name,
		CurrencyUnit: *res.CurrencyUnit,
		SellingPrice: *res.SellingPrice,
	}
	return body
}

// NewUpdateProductResponseBody builds the HTTP response body from the result
// of the "updateProduct" endpoint of the "product" service.
func NewUpdateProductResponseBody(res *productviews.StoredProductView) *UpdateProductResponseBody {
	body := &UpdateProductResponseBody{
		ID:            *res.ID,
		Name:          *res.Name,
		CurrencyUnit:  *res.CurrencyUnit,
		Description:   *res.Description,
		UpdatedTime:   *res.UpdatedTime,
		PurchasePrice: *res.PurchasePrice,
		SellingPrice:  *res.SellingPrice,
	}
	return body
}

// NewUpdateProductResponseBodyTiny builds the HTTP response body from the
// result of the "updateProduct" endpoint of the "product" service.
func NewUpdateProductResponseBodyTiny(res *productviews.StoredProductView) *UpdateProductResponseBodyTiny {
	body := &UpdateProductResponseBodyTiny{
		ID:           *res.ID,
		Name:         *res.Name,
		CurrencyUnit: *res.CurrencyUnit,
		SellingPrice: *res.SellingPrice,
	}
	return body
}

// NewGetProductNotFoundResponseBody builds the HTTP response body from the
// result of the "getProduct" endpoint of the "product" service.
func NewGetProductNotFoundResponseBody(res *product.NotFound) *GetProductNotFoundResponseBody {
	body := &GetProductNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewFilterProductNotFoundResponseBody builds the HTTP response body from the
// result of the "filterProduct" endpoint of the "product" service.
func NewFilterProductNotFoundResponseBody(res *product.NotFound) *FilterProductNotFoundResponseBody {
	body := &FilterProductNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewGetProductPayload builds a product service getProduct endpoint payload.
func NewGetProductPayload(id int, view *string) *product.GetProductPayload {
	v := &product.GetProductPayload{}
	v.ID = id
	v.View = view

	return v
}

// NewFilterProductPayload builds a product service filterProduct endpoint
// payload.
func NewFilterProductPayload(currencyUnit string) *product.FilterProductPayload {
	v := &product.FilterProductPayload{}
	v.CurrencyUnit = currencyUnit

	return v
}

// NewCreateProductProduct builds a product service createProduct endpoint
// payload.
func NewCreateProductProduct(body *CreateProductRequestBody) *product.Product {
	v := &product.Product{
		Name:          *body.Name,
		CurrencyUnit:  *body.CurrencyUnit,
		Description:   *body.Description,
		UpdatedTime:   *body.UpdatedTime,
		PurchasePrice: *body.PurchasePrice,
		SellingPrice:  *body.SellingPrice,
	}

	return v
}

// NewUpdateProductPayload builds a product service updateProduct endpoint
// payload.
func NewUpdateProductPayload(body *UpdateProductRequestBody, id int) *product.UpdateProductPayload {
	v := &product.UpdateProductPayload{}
	v.Product = unmarshalProductRequestBodyToProductProduct(body.Product)
	v.ID = id

	return v
}

// NewRemoveProductPayload builds a product service removeProduct endpoint
// payload.
func NewRemoveProductPayload(id int) *product.RemoveProductPayload {
	v := &product.RemoveProductPayload{}
	v.ID = id

	return v
}

// ValidateCreateProductRequestBody runs the validations defined on
// CreateProductRequestBody
func ValidateCreateProductRequestBody(body *CreateProductRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CurrencyUnit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency_unit", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.UpdatedTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_time", "body"))
	}
	if body.PurchasePrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purchase_price", "body"))
	}
	if body.SellingPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("selling_price", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	return
}

// ValidateUpdateProductRequestBody runs the validations defined on
// UpdateProductRequestBody
func ValidateUpdateProductRequestBody(body *UpdateProductRequestBody) (err error) {
	if body.Product == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product", "body"))
	}
	if body.Product != nil {
		if err2 := ValidateProductRequestBody(body.Product); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProductRequestBody runs the validations defined on ProductRequestBody
func ValidateProductRequestBody(body *ProductRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CurrencyUnit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency_unit", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.UpdatedTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_time", "body"))
	}
	if body.PurchasePrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purchase_price", "body"))
	}
	if body.SellingPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("selling_price", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	return
}
